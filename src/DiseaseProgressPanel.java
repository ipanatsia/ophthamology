
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DiseaseProgressPanel.java
 *
 * Created on 31 Ιαν 2009, 12:58:46 πμ
 */
/**
 *
 * @author User
 */
public class DiseaseProgressPanel extends java.awt.Panel {

    /** Creates new form DiseaseProgressPanel */

    //Το πανελ αυτό είναι κοινό, τόσο κατά την εξέταση, όσο και κατα την
    //προβολή του ιστορικού. Η Mode δείχνει σε τι είδους κατάσταση βρίσκόμαστε
    //και καθορίζει ανάλογα κάποιες ιδιαίτερες συμπεριφορές.

    private int mode;

    public int getMode() {
        return mode;
    }

    public void setMode(int m) {
        mode = m;
        //Το κουμπί έχει διαφορετικό κείμενο
        if (mode == 1) {
            jButton1.setText("Ενημέρωση Επιλεγμένης Εγγραφής");
        } else {
            jButton1.setText("Ενημέρωση Ιστορικού με τα τελευταία στοιχεία");

        }
    }

    public DiseaseProgressPanel() {
        initComponents();
        diseaseProgressDays = new Vector<Calendar>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ημερομηνία", "Εξέλιξη"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Ενημέρωση Ιστορικού με τα τελευταία στοιχεία");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private Vector<Calendar> diseaseProgressDays;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Με το πάτημα του κουμπιού ανακτούμε το ιστορικό που βλέπει ο χρήστης
        DefaultTableModel dataModel = (DefaultTableModel) jTable1.getModel();
        if (mode != 1) {
            //Αν είμαστε σε κατάσταση νέας εξέτασης
            //ο γιατρός μπορεί να εισάγει νέες εγγραφές για την εξέλιξη της ασθένειας
            //στο ιστορικό του ασθενούς, δεν μπορεί να επέμβει όμως σε προηγούμενες
            //εγγραφές
            String textToBeInserted = JOptionPane.showInputDialog(this, "Παρακαλώ εισάγετε την σημερινή εγγραφή ιστορικού για" +
                    " την εξέλιξη ασθένειας με βάση τις πρόσφατες εξετάσεις", "Ενημέρωση Ιστορικού");
            if(textToBeInserted==null) return;
            Object row[] = new Object[2];
            row[1] = textToBeInserted;

            row[0] = examDay.get(Calendar.DAY_OF_MONTH) + "/" + (1 + examDay.get(Calendar.MONTH)) + "/" +
                    examDay.get(Calendar.YEAR);
            getDiseaseProgressDays().addElement(examDay);

            dataModel.addRow(row);
            jTable1.setModel(dataModel);
        } else {
            //Κατα την προβολή του ιστορικού ενός ασθενή, δεν είναι δυνατή
            //η προσθήκη μιας νέας εγγραφής στην εξέλιξη θεωρώντας ότι αυτή
            //προκύπτει κατα τη διάρκεια μιας εξέτασης
            int r = jTable1.getSelectedRow();

            String textToBeUpdated = JOptionPane.showInputDialog(this, "Παρακαλώ διορθώστε την εγγραφή ιστορικού για" +
                    " την εξέλιξη ασθένειας", dataModel.getValueAt(r, 1));
            dataModel.setValueAt(textToBeUpdated, r, 1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public Calendar getExamDay() {
        return examDay;
    }

    public void setExamDay(Calendar val) {
        examDay = val;
    }
    Calendar examDay;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    DiseaseProgress diseaseProgress;

    public void setDiseaseProgress(DiseaseProgress val) {
        diseaseProgress = val;
        if (val.getDayOfProgress() != null) {
            for (int i = 0; i < val.getDayOfProgress().length; i++) {
                diseaseProgressDays.addElement(val.getDayOfProgress()[i]);
            }
        }
        UpdateGUIElements();
    }

    public DiseaseProgress getDiseaseProgress() {
        UpdateVariablesFromGUI();
        return diseaseProgress;
    }

    private void UpdateVariablesFromGUI() {
        //Η συνάρτηση αυτή ενημερώνει τις μεταβλητές της φόρμας από τα
        //με βάση τα στοιχεία που βλέπει ο χρήστης.
        int records = jTable1.getModel().getRowCount();
        String[] prog = new String[records];
        Calendar[] days = new Calendar[records];
        for (int i = 0; i < records; ++i) {
            GregorianCalendar obj = new GregorianCalendar();

            days[i] = getDiseaseProgressDays().get(i);
            prog[i] = (String) jTable1.getModel().getValueAt(i, 1);
        }
        diseaseProgress.setDayOfProgress(days);
        diseaseProgress.setProgress(prog);
    }

    private void UpdateGUIElements() {
        //Η συνάρτηση αυτή ενημερώνει τα στοιχεία που βλέπει ο χρήστης
        //με βάση τα στοιχεία που υπάρχουν στις εγγραφές.
        DefaultTableModel mdl = (DefaultTableModel) jTable1.getModel();
        String[] prog = diseaseProgress.getProgress();
        Calendar[] days = diseaseProgress.getDayOfProgress();
        int records=0;
        if (prog!=null) records = prog.length;
        while (records < mdl.getRowCount()) {
            mdl.removeRow(records);
        }
        int i;
        for (i = 0; i < mdl.getRowCount(); ++i) {
            mdl.setValueAt(days[i].get(Calendar.DAY_OF_MONTH) + "/" + (1 + days[i].get(Calendar.MONTH)) + "/" +
                    days[i].get(Calendar.YEAR), i, 0);
            mdl.setValueAt(prog[i], i, 1);
        }
        for (; i < records; ++i) {
            Object[] row = new Object[2];
            row[0] = days[i].get(Calendar.DAY_OF_MONTH) + "/" + (1 + days[i].get(Calendar.MONTH)) + "/" +
                    days[i].get(Calendar.YEAR);
            row[1] = prog[i];
            mdl.addRow(row);
        }
        jTable1.setModel(mdl);


    }

    /**
     * @return the diseaseProgressDays
     */
    public // </editor-fold>
    Vector<Calendar> getDiseaseProgressDays() {
        return diseaseProgressDays;
    }

    /**
     * @param diseaseProgressDays the diseaseProgressDays to set
     */
    public void setDiseaseProgressDays(Vector<Calendar> diseaseProgressDays) {
        this.diseaseProgressDays = diseaseProgressDays;
    }
}
